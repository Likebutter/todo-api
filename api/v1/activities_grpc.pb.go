// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: activities.proto

package api_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActivitiesApiClient is the client API for ActivitiesApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivitiesApiClient interface {
	Insert(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*Activity, error)
	Get(ctx context.Context, in *GetActivityRequest, opts ...grpc.CallOption) (*Activity, error)
	List(ctx context.Context, in *ListActivitiesRequest, opts ...grpc.CallOption) (*Activities, error)
}

type activitiesApiClient struct {
	cc grpc.ClientConnInterface
}

func NewActivitiesApiClient(cc grpc.ClientConnInterface) ActivitiesApiClient {
	return &activitiesApiClient{cc}
}

func (c *activitiesApiClient) Insert(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := c.cc.Invoke(ctx, "/api.v1.ActivitiesApi/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesApiClient) Get(ctx context.Context, in *GetActivityRequest, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := c.cc.Invoke(ctx, "/api.v1.ActivitiesApi/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesApiClient) List(ctx context.Context, in *ListActivitiesRequest, opts ...grpc.CallOption) (*Activities, error) {
	out := new(Activities)
	err := c.cc.Invoke(ctx, "/api.v1.ActivitiesApi/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivitiesApiServer is the server API for ActivitiesApi service.
// All implementations must embed UnimplementedActivitiesApiServer
// for forward compatibility
type ActivitiesApiServer interface {
	Insert(context.Context, *Activity) (*Activity, error)
	Get(context.Context, *GetActivityRequest) (*Activity, error)
	List(context.Context, *ListActivitiesRequest) (*Activities, error)
	mustEmbedUnimplementedActivitiesApiServer()
}

// UnimplementedActivitiesApiServer must be embedded to have forward compatible implementations.
type UnimplementedActivitiesApiServer struct {
}

func (UnimplementedActivitiesApiServer) Insert(context.Context, *Activity) (*Activity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedActivitiesApiServer) Get(context.Context, *GetActivityRequest) (*Activity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedActivitiesApiServer) List(context.Context, *ListActivitiesRequest) (*Activities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedActivitiesApiServer) mustEmbedUnimplementedActivitiesApiServer() {}

// UnsafeActivitiesApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivitiesApiServer will
// result in compilation errors.
type UnsafeActivitiesApiServer interface {
	mustEmbedUnimplementedActivitiesApiServer()
}

func RegisterActivitiesApiServer(s grpc.ServiceRegistrar, srv ActivitiesApiServer) {
	s.RegisterService(&ActivitiesApi_ServiceDesc, srv)
}

func _ActivitiesApi_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitiesApiServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ActivitiesApi/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitiesApiServer).Insert(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivitiesApi_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitiesApiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ActivitiesApi/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitiesApiServer).Get(ctx, req.(*GetActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivitiesApi_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitiesApiServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ActivitiesApi/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitiesApiServer).List(ctx, req.(*ListActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivitiesApi_ServiceDesc is the grpc.ServiceDesc for ActivitiesApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivitiesApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.ActivitiesApi",
	HandlerType: (*ActivitiesApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _ActivitiesApi_Insert_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ActivitiesApi_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ActivitiesApi_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activities.proto",
}
